// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PuntuarSolucion Rendering the simple component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PuntuarSolucion />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="row"
      >
        <strong />
        <p>
          Solución propuesta por mi: 
          <strong>
            
          </strong>
        </p>
        <p>
          Soluciones propuestas por otros usuarios:
        </p>
        <div />
      </div>,
      "className": "box-header with-border",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <strong />,
          <p>
            Solución propuesta por mi: 
            <strong>
              
            </strong>
          </p>,
          <p>
            Soluciones propuestas por otros usuarios:
          </p>,
          <div />,
        ],
        "className": "row",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "strong",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Solución propuesta por mi: ",
              <strong>
                
              </strong>,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Solución propuesta por mi: ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
              },
              "ref": null,
              "rendered": "",
              "type": "strong",
            },
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Soluciones propuestas por otros usuarios:",
          },
          "ref": null,
          "rendered": "Soluciones propuestas por otros usuarios:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
          },
          "ref": null,
          "rendered": Array [],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="row"
        >
          <strong />
          <p>
            Solución propuesta por mi: 
            <strong>
              
            </strong>
          </p>
          <p>
            Soluciones propuestas por otros usuarios:
          </p>
          <div />
        </div>,
        "className": "box-header with-border",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <strong />,
            <p>
              Solución propuesta por mi: 
              <strong>
                
              </strong>
            </p>,
            <p>
              Soluciones propuestas por otros usuarios:
            </p>,
            <div />,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "strong",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Solución propuesta por mi: ",
                <strong>
                  
                </strong>,
              ],
            },
            "ref": null,
            "rendered": Array [
              "Solución propuesta por mi: ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                },
                "ref": null,
                "rendered": "",
                "type": "strong",
              },
            ],
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Soluciones propuestas por otros usuarios:",
            },
            "ref": null,
            "rendered": "Soluciones propuestas por otros usuarios:",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [],
            },
            "ref": null,
            "rendered": Array [],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
